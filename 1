#include <iostream>
#include <vector>
#include <string>

class Student {
private:
    std::string name;
    int studentID;

public:
    Student(const std::string& n, int id) : name(n), studentID(id) {}

    const std::string& getName() const {
        return name;
    }

    int getStudentID() const {
        return studentID;
    }
};

class Course {
private:
    std::string courseName;
    int courseCode;

public:
    Course(const std::string& name, int code) : courseName(name), courseCode(code) {}

    const std::string& getCourseName() const {
        return courseName;
    }

    int getCourseCode() const {
        return courseCode;
    }
};

class Enrollment {
private:
    const Student* student;
    const Course* course;
    int grade;

public:
    Enrollment(const Student* s, const Course* c, int g) : student(s), course(c), grade(g) {}

    const Student* getStudent() const {
        return student;
    }

    const Course* getCourse() const {
        return course;
    }

    int getGrade() const {
        return grade;
    }
};

class University {
private:
    std::vector<Student> students;
    std::vector<Course> courses;
    std::vector<Enrollment> enrollments;

public:
    void addStudent(const Student& student) {
        students.push_back(student);
    }

    void addCourse(const Course& course) {
        courses.push_back(course);
    }

    void enrollStudent(const Student& student, const Course& course, int grade) {
        enrollments.emplace_back(&student, &course, grade);
    }

    void printStudentInfo() const {
        for (const auto& student : students) {
            std::cout << "Student ID: " << student.getStudentID() << ", Name: " << student.getName() << '\n';
        }
    }

    void printCourseInfo() const {
        for (const auto& course : courses) {
            std::cout << "Course Code: " << course.getCourseCode() << ", Name: " << course.getCourseName() << '\n';
        }
    }

    void printEnrollmentInfo() const {
        for (const auto& enrollment : enrollments) {
            std::cout << "Student ID: " << enrollment.getStudent()->getStudentID()
                      << ", Course Code: " << enrollment.getCourse()->getCourseCode()
                      << ", Grade: " << enrollment.getGrade() << '\n';
        }
    }
};

int main() {
    University techUni;

    Student student1("John Doe", 1001);
    Student student2("Alice Smith", 1002);

    Course course1("Computer Science", 2001);
    Course course2("Mathematics", 2002);

    techUni.addStudent(student1);
    techUni.addStudent(student2);

    techUni.addCourse(course1);
    techUni.addCourse(course2);

    techUni.enrollStudent(student1, course1, 85);
    techUni.enrollStudent(student1, course2, 90);
    techUni.enrollStudent(student2, course1, 78);

    std::cout << "Students:\n";
    techUni.printStudentInfo();

    std::cout << "\nCourses:\n";
    techUni.printCourseInfo();

    std::cout << "\nEnrollments:\n";
    techUni.printEnrollmentInfo();

    return 0;
}
