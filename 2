#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

enum class Field {
    COMPUTER_SCIENCE,
    MECHANICAL_ENGINEERING,
    FOOD_TECHNOLOGY,
    UNKNOWN
};

class Student {
public:
    std::string name;
    std::string uniqueID;
    bool isGraduate;

    Student(const std::string& n, const std::string& id) : name(n), uniqueID(id), isGraduate(false) {}
};

class Faculty {
public:
    Field field;
    std::vector<Student> students;

    Faculty(Field f) : field(f) {}

    void enrollStudent(const Student& student) {
        students.push_back(student);
    }

    void graduateStudent(const Student& student) {
        auto it = std::find_if(students.begin(), students.end(), [&student](const Student& s) {
            return s.uniqueID == student.uniqueID;
        });

        if (it != students.end()) {
            it->isGraduate = true;
        }
    }

    void displayStudents(bool showGraduates) const {
        std::cout << "Students in Faculty " << static_cast<int>(field) << ":\n";
        for (const auto& student : students) {
            if (showGraduates || !student.isGraduate) {
                std::cout << "Name: " << student.name << ", Unique ID: " << student.uniqueID << '\n';
            }
        }
        std::cout << "\n";
    }
};

class University {
public:
    std::vector<Faculty> faculties;

    void createFaculty(Field field) {
        faculties.emplace_back(field);
    }

    void assignStudentToFaculty(const Student& student, Field field) {
        auto it = std::find_if(faculties.begin(), faculties.end(), [&field](const Faculty& faculty) {
            return faculty.field == field;
        });

        if (it != faculties.end()) {
            it->enrollStudent(student);
            std::cout << student.name << " assigned to Faculty " << static_cast<int>(field) << ".\n";
        } else {
            std::cout << "Faculty " << static_cast<int>(field) << " does not exist.\n";
        }
    }

    void graduateStudent(const Student& student, Field field) {
        auto it = std::find_if(faculties.begin(), faculties.end(), [&field](const Faculty& faculty) {
            return faculty.field == field;
        });

        if (it != faculties.end()) {
            it->graduateStudent(student);
            std::cout << student.name << " graduated from Faculty " << static_cast<int>(field) << ".\n";
        } else {
            std::cout << "Faculty " << static_cast<int>(field) << " does not exist.\n";
        }
    }

    void displayFaculties() const {
        std::cout << "University Faculties:\n";
        for (const auto& faculty : faculties) {
            std::cout << "Faculty " << static_cast<int>(faculty.field) << "\n";
        }
        std::cout << "\n";
    }

    Field getFacultyForStudent(const Student& student) const {
        for (const auto& faculty : faculties) {
            if (std::any_of(faculty.students.begin(), faculty.students.end(),
                            [&student](const Student& s) { return s.uniqueID == student.uniqueID; })) {
                return faculty.field;
            }
        }
        return Field::UNKNOWN;
    }
};

int main() {
    University tum;
    tum.createFaculty(Field::COMPUTER_SCIENCE);
    tum.createFaculty(Field::MECHANICAL_ENGINEERING);
    tum.createFaculty(Field::FOOD_TECHNOLOGY);

    Student student1("John Doe", "johndoe123");
    Student student2("Alice Smith", "alicesmith456");
    Student student3("Bob Johnson", "bobjohnson789");

    tum.assignStudentToFaculty(student1, Field::COMPUTER_SCIENCE);
    tum.assignStudentToFaculty(student2, Field::MECHANICAL_ENGINEERING);
    tum.assignStudentToFaculty(student3, Field::FOOD_TECHNOLOGY);

    tum.displayFaculties();

    tum.displayFaculties();
    tum.displayFaculties();

    return 0;
}
