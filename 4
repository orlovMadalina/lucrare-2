#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    char name[100];
    char email[100];
    int studentID;
};

void displayStudent(const struct Student* student) {
    printf("Name: %s, Email: %s, Student ID: %d\n", student->name, student->email, student->studentID);
}

void saveToFile(const char* filename, const struct Student* students, size_t count) {
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    for (size_t i = 0; i < count; ++i) {
        fprintf(file, "%s %s %d\n", students[i].name, students[i].email, students[i].studentID);
    }

    fclose(file);
    printf("Data saved to %s\n", filename);
}

void loadFromFile(const char* filename, struct Student** students, size_t* count) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    *count = 0;
    *students = NULL;

    while (fscanf(file, "%s %s %d", (*students)[*count].name, (*students)[*count].email, &(*students)[*count].studentID) == 3) {
        ++(*count);
        *students = (struct Student*)realloc(*students, (*count + 1) * sizeof(struct Student));
    }

    fclose(file);
    printf("Data loaded from %s\n", filename);
}

void batchEnrollFromFile(const char* filename, struct Student** students, size_t* count) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    while (fscanf(file, "%s %s %d", (*students)[*count].name, (*students)[*count].email, &(*students)[*count].studentID) == 3) {
        ++(*count);
        *students = (struct Student*)realloc(*students, (*count + 1) * sizeof(struct Student));
    }

    fclose(file);
    printf("Batch enrolled from %s\n", filename);
}

void batchGraduateFromFile(const char* filename, struct Student* students, size_t count) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char email[100];
    while (fscanf(file, "%s", email) == 1) {
        for (size_t i = 0; i < count; ++i) {
            if (strcmp(students[i].email, email) == 0) {
                // Remove the student (assuming order doesn't matter)
                memmove(&students[i], &students[i + 1], (count - i - 1) * sizeof(struct Student));
                --count;
                students = (struct Student*)realloc(students, count * sizeof(struct Student));
                printf("Graduated: %s\n", email);
                break;
            }
        }
    }

    fclose(file);
}

void displayStudents(const struct Student* students, size_t count) {
    for (size_t i = 0; i < count; ++i) {
        displayStudent(&students[i]);
    }
}

int main() {
    struct Student* students = NULL;
    size_t count = 0;

    // Add students
    struct Student newStudents[] = {
        {"John Doe", "john@example.com", 1001},
        {"Alice Smith", "alice@example.com", 1002},
        {"Bob Johnson", "bob@example.com", 1003}
    };

    size_t newStudentsCount = sizeof(newStudents) / sizeof(newStudents[0]);

    for (size_t i = 0; i < newStudentsCount; ++i) {
        students = (struct Student*)realloc(students, (count + 1) * sizeof(struct Student));
        students[count++] = newStudents[i];
    }

    saveToFile("students.txt", students, count);

    free(students);
    students = NULL;
    count = 0;

    loadFromFile("students.txt", &students, &count);

    displayStudents(students, count);

    batchEnrollFromFile("enroll.txt", &students, &count);

    displayStudents(students, count);

    batchGraduateFromFile("graduate.txt", students, count);

    displayStudents(students, count);

    free(students);

    return 0;
}
